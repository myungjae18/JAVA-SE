package messenger.server;

import java.awt.BorderLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Vector;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

import messenger.db.ConnectionManager;



public class MultiServer extends JFrame {
	JPanel p_north;
	JButton bt;
	JTextArea area;
	JScrollPane scroll;

	ConnectionManager conM;
	
	public MultiServer() {
		getConnection();
		p_north = new JPanel();
		area = new JTextArea();
		scroll = new JScrollPane(area);
		conM = new ConnectionManager();
		
		p_north.add(bt);
		this.add(scroll);
		this.add(p_north, BorderLayout.NORTH);

		area.setFont(new Font("돋음", Font.BOLD, 15));

		this.setSize(400, 500);
		this.setVisible(true);
		this.setDefaultCloseOperation(EXIT_ON_CLOSE);
	}
	
	//접속 객체를 반환하는 메서드
	public Connection getConnection() {
		Connection con=null;
		try {
			Class.forName(conM.getDriver());
			con=DriverManager.getConnection(conM.getUrl(), conM.getUser(), conM.getPassword());
			if(con==null) {
				System.out.println("접속 실패");
			}else {
				System.out.println("접속 성공");
			}
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return con;
	}
	public void disconnect(Connection con) {//사용된 커넥션 끊기
		if(con != null) {
			try {
				con.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}
	
	public static void main(String[] args) {
		new MultiServer();
	}
}
